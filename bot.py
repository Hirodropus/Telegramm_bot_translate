
import telebot
import requests
import random
import psycopg2
from psycopg2 import sql
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import logging


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)
DB_CONFIG = {
    'dbname': 'english_bot_db',
    'user': 'postgres', # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    'password': 'xxxxxx', # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    'host': 'xxx.xxx.xxx.xxx',
    'port': '5432'
}

# –¢–æ–∫–µ–Ω—ã
TOKEN = '' # –≤—Å—Ç–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ —Ç–µk–µ–≥—Ä–∞–º–º –±–æ—Ç–∞


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
state_storage = StateMemoryStorage()
bot = TeleBot(TOKEN, state_storage=state_storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
known_users = []
userStep = {}
buttons = []

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    STATS = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'
    RESTART = '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å üîÑ'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    add_english = State()
    add_russian = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = False
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def get_or_create_user(telegram_id, username, first_name, last_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    if not conn:
        return None

    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (telegram_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name
                RETURNING id
            """, (telegram_id, username or '', first_name or '', last_name or ''))
            user_id = cur.fetchone()[0]
            conn.commit()
            return user_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        conn.rollback()
        return None
    finally:
        conn.close()

def get_random_word(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    conn = get_db_connection()
    if not conn:
        return None

    try:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
            cur.execute("""
                SELECT w.id, w.english_word, w.russian_translation
                FROM words w
                WHERE w.id NOT IN (
                    SELECT uw.word_id FROM user_words uw 
                    WHERE uw.user_id = %s AND uw.correct_answers >= 3
                )
                ORDER BY RANDOM()
                LIMIT 1
            """, (user_id,))
            result = cur.fetchone()

            if not result:
                # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã, –±–µ—Ä–µ–º –ª—é–±–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
                cur.execute("""
                    SELECT id, english_word, russian_translation
                    FROM words
                    ORDER BY RANDOM()
                    LIMIT 1
                """)
                result = cur.fetchone()

            if result:
                return {
                    'id': result[0],
                    'english_word': result[1],
                    'russian_translation': result[2]
                }
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        return None
    finally:
        conn.close()

def get_random_words(exclude_word_id, limit=3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"""
    conn = get_db_connection()
    if not conn:
        return []

    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT english_word
                FROM words
                WHERE id != %s
                ORDER BY RANDOM()
                LIMIT %s
            """, (exclude_word_id, limit))
            return [row[0] for row in cur.fetchall()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤: {e}")
        return []
    finally:
        conn.close()


def update_user_stats(user_id, is_correct):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    if not conn:
        return False

    try:
        with conn.cursor() as cur:
            if is_correct:
                cur.execute("""
                    INSERT INTO user_stats (user_id, total_correct, last_activity)
                    VALUES (%s, 1, CURRENT_TIMESTAMP)
                    ON CONFLICT (user_id) DO UPDATE SET
                    total_correct = user_stats.total_correct + 1,
                    last_activity = CURRENT_TIMESTAMP
                """, (user_id,))
            else:
                cur.execute("""
                    INSERT INTO user_stats (user_id, total_wrong, last_activity)
                    VALUES (%s, 1, CURRENT_TIMESTAMP)
                    ON CONFLICT (user_id) DO UPDATE SET
                    total_wrong = user_stats.total_wrong + 1,
                    last_activity = CURRENT_TIMESTAMP
                """, (user_id,))
            conn.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def update_user_word(user_id, word_id, is_correct):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    conn = get_db_connection()
    if not conn:
        return False

    try:
        with conn.cursor() as cur:
            if is_correct:
                cur.execute("""
                    INSERT INTO user_words (user_id, word_id, correct_answers, last_practiced)
                    VALUES (%s, %s, 1, CURRENT_TIMESTAMP)
                    ON CONFLICT (user_id, word_id) DO UPDATE SET
                    correct_answers = user_words.correct_answers + 1,
                    last_practiced = CURRENT_TIMESTAMP
                """, (user_id, word_id))
            else:
                cur.execute("""
                    INSERT INTO user_words (user_id, word_id, wrong_answers, last_practiced)
                    VALUES (%s, %s, 1, CURRENT_TIMESTAMP)
                    ON CONFLICT (user_id, word_id) DO UPDATE SET
                    wrong_answers = user_words.wrong_answers + 1,
                    last_practiced = CURRENT_TIMESTAMP
                """, (user_id, word_id))
            conn.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def add_new_word(english_word, russian_translation):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É"""
    conn = get_db_connection()
    if not conn:
        return False

    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO words (english_word, russian_translation)
                VALUES (%s, %s)
                ON CONFLICT (english_word) DO NOTHING
                RETURNING id
            """, (english_word.lower(), russian_translation.lower()))
            conn.commit()
            return cur.rowcount > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()


def delete_user_word(user_id, word_text):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–∑—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    conn = get_db_connection()
    if not conn:
        return False

    try:
        with conn.cursor() as cur:
            cur.execute("""
                DELETE FROM user_words uw
                USING words w
                WHERE uw.word_id = w.id 
                AND uw.user_id = %s 
                AND w.english_word = %s
            """, (user_id, word_text.lower()))
            conn.commit()
            return cur.rowcount > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    if not conn:
        return {'correct': 0, 'wrong': 0, 'learned': 0}

    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT total_correct, total_wrong, words_learned
                FROM user_stats
                WHERE user_id = %s
            """, (user_id,))
            result = cur.fetchone()
            if result:
                return {
                    'correct': result[0] or 0,
                    'wrong': result[1] or 0,
                    'learned': result[2] or 0
                }
            return {'correct': 0, 'wrong': 0, 'learned': 0}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'correct': 0, 'wrong': 0, 'learned': 0}
    finally:
        conn.close()

def check_db_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
    try:
        conn = get_db_connection()
        if conn:
            conn.close()
            return True
        return False
    except:
        return False


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìö English Learning Bot - –ü–æ–º–æ—â—å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤
/cards - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ö–Ω–æ–ø–∫–∏:
–î–∞–ª—å—à–µ ‚è≠ - –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∏–∑—É—á–µ–Ω–∏—è
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å üîÑ - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
2. –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
4. –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
"""
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['start', 'cards'])
def create_cards(message):
    if not check_db_connection():
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cid = message.chat.id
    user_id = get_or_create_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    if not user_id:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0

    show_next_card(message, user_id)


def show_next_card(message, user_id):
    word_data = get_random_word(user_id)
    if not word_data:
        bot.send_message(message.chat.id,
                         "üìö –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_word —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞.")
        return

    other_words = get_random_words(word_data['id'], 3)
    other_words.append(word_data['english_word'])
    random.shuffle(other_words)

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    global buttons
    buttons = []

    for word in other_words:
        btn = types.KeyboardButton(word)
        buttons.append(btn)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    stats_btn = types.KeyboardButton(Command.STATS)
    restart_btn = types.KeyboardButton(Command.RESTART)

    buttons.extend([next_btn, add_word_btn, delete_word_btn, stats_btn, restart_btn])
    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {word_data['russian_translation']}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = word_data['english_word']
        data['translate_word'] = word_data['russian_translation']
        data['word_id'] = word_data['id']
        data['other_words'] = other_words


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    user_id = get_or_create_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    if user_id:
        show_next_card(message, user_id)


@bot.message_handler(func=lambda message: message.text == Command.RESTART)
def restart_bot(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    user_id = get_or_create_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    if not user_id:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if delete_user_word(user_id, data['target_word']):
            bot.send_message(message.chat.id, f"üóëÔ∏è –°–ª–æ–≤–æ '{data['target_word']}' —É–¥–∞–ª–µ–Ω–æ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–µ–Ω–∏—è!")
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∏–∑—É—á–µ–Ω–∏—è!")


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(msg, process_english_word)


def process_english_word(message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.")
        return

    bot.set_state(message.from_user.id, MyStates.add_english, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['new_english_word'] = message.text.strip()

    msg = bot.send_message(message.chat.id, "üåê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:")
    bot.register_next_step_handler(msg, process_russian_translation)


def process_russian_translation(message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        english_word = data['new_english_word']
        russian_translation = message.text.strip()

        if add_new_word(english_word, russian_translation):
            bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ '{english_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@bot.message_handler(func=lambda message: message.text == Command.STATS)
def show_stats(message):
    user_id = get_or_create_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    if not user_id:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    stats = get_user_stats(user_id)
    total = stats['correct'] + stats['wrong']
    accuracy = (stats['correct'] / total * 100) if total > 0 else 0

    stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct']}
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['wrong']}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%
üìö –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {stats['learned']}
"""
    bot.send_message(message.chat.id, stats_text)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    if message.text.startswith('/'):
        return

    user_id = get_or_create_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    if not user_id:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if 'target_word' not in data:
            create_cards(message)
            return

        target_word = data['target_word']
        word_id = data['word_id']

        if text == target_word:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            update_user_stats(user_id, True)
            update_user_word(user_id, word_id, True)

            hint_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n{target_word} -> {data['translate_word']}"
            # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            updated_buttons = []
            for btn_text in data['other_words']:
                if btn_text == text:
                    updated_buttons.append(types.KeyboardButton(btn_text + ' ‚úÖ'))
                else:
                    updated_buttons.append(types.KeyboardButton(btn_text))
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            update_user_stats(user_id, False)
            update_user_word(user_id, word_id, False)

            hint_text = f"‚ùå –î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {target_word} -> {data['translate_word']}"
            # –ü–æ–º–µ—á–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            updated_buttons = []
            for btn_text in data['other_words']:
                if btn_text == text:
                    updated_buttons.append(types.KeyboardButton(btn_text + ' ‚ùå'))
                elif btn_text == target_word:
                    updated_buttons.append(types.KeyboardButton(btn_text + ' ‚úÖ'))
                else:
                    updated_buttons.append(types.KeyboardButton(btn_text))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    stats_btn = types.KeyboardButton(Command.STATS)
    restart_btn = types.KeyboardButton(Command.RESTART)

    updated_buttons.extend([next_btn, add_word_btn, delete_word_btn, stats_btn, restart_btn])
    markup.add(*updated_buttons)

    bot.send_message(message.chat.id, hint_text, reply_markup=markup)



@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìö English Learning Bot - –ü–æ–º–æ—â—å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤
/cards - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ö–Ω–æ–ø–∫–∏:
–î–∞–ª—å—à–µ ‚è≠ - –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∏–∑—É—á–µ–Ω–∏—è
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å üîÑ - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
"""
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['db_status'])
def db_status(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    if check_db_connection():
        bot.reply_to(message, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ")
    else:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
bot.add_custom_filter(custom_filters.StateFilter(bot))

if __name__ == '__main__':
    logger.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    print('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if check_db_connection():
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    else:
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

    try:
        bot.infinity_polling(timeout=60, skip_pending=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")