import psycopg2
import sys

def setup_database():

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
    DB_CONFIG = {
        'dbname': 'postgres',
        'user': 'postgres',  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        'password': 'xxxxxxx',  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
        'host': 'xxx.xxx.xxx.xxx',
        'port': '5432'
    }


    # –ù–∞—á–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    INITIAL_WORDS = [
        ('hello', '–ø—Ä–∏–≤–µ—Ç'), ('world', '–º–∏—Ä'), ('peace', '–ø–æ–∫–æ–π'),
        ('love', '–ª—é–±–æ–≤—å'), ('house', '–¥–æ–º'), ('car', '–º–∞—à–∏–Ω–∞'),
        ('book', '–∫–Ω–∏–≥–∞'), ('water', '–≤–æ–¥–∞'), ('sun', '—Å–æ–ª–Ω—Ü–µ'),
        ('moon', '–ª—É–Ω–∞'), ('star', '–∑–≤–µ–∑–¥–∞'), ('tree', '–¥–µ—Ä–µ–≤–æ'),
        ('computer', '–∫–æ–º–ø—å—é—Ç–µ—Ä'), ('phone', '—Ç–µ–ª–µ—Ñ–æ–Ω'), ('friend', '–¥—Ä—É–≥')
    ]

    conn = None
    cur = None

    try:
        print("=== –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram-–±–æ—Ç–∞ –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ ===\n")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = True  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        cur.execute("SELECT 1 FROM pg_database WHERE datname = 'english_bot_db'")
        db_exists = cur.fetchone()

        if db_exists:
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'english_bot_db' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'english_bot_db'...")
            cur.execute("CREATE DATABASE english_bot_db")
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        cur.close()
        conn.close()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        DB_CONFIG['dbname'] = 'english_bot_db'
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                username VARCHAR(100),
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # –¢–∞–±–ª–∏—Ü–∞ —Å–ª–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS words (
                id SERIAL PRIMARY KEY,
                english_word VARCHAR(100) UNIQUE NOT NULL,
                russian_translation VARCHAR(100) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'words' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # –¢–∞–±–ª–∏—Ü–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_words (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                word_id INTEGER REFERENCES words(id) ON DELETE CASCADE,
                correct_answers INTEGER DEFAULT 0,
                wrong_answers INTEGER DEFAULT 0,
                last_practiced TIMESTAMP,
                UNIQUE(user_id, word_id)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'user_words' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_stats (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE UNIQUE,
                total_correct INTEGER DEFAULT 0,
                total_wrong INTEGER DEFAULT 0,
                words_learned INTEGER DEFAULT 0,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'user_stats' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

        # –§–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        conn.commit()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤...")
        added_count = 0
        skipped_count = 0

        for english, russian in INITIAL_WORDS:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
                cur.execute(
                    "INSERT INTO words (english_word, russian_translation) VALUES (%s, %s)",
                    (english.lower(), russian.lower())
                )
                conn.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                added_count += 1
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {english} -> {russian}")

            except psycopg2.IntegrityError:
                # –î—É–±–ª–∏–∫–∞—Ç - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                conn.rollback()
                skipped_count += 1
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç): {english} -> {russian}")

            except Exception as e:
                conn.rollback()
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {english} -> {russian} - {e}")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id)",
            "CREATE INDEX IF NOT EXISTS idx_words_english ON words(english_word)",
            "CREATE INDEX IF NOT EXISTS idx_user_words_user_id ON user_words(user_id)",
            "CREATE INDEX IF NOT EXISTS idx_user_words_word_id ON user_words(word_id)"
        ]

        for index_sql in indexes:
            try:
                cur.execute(index_sql)
                print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")

        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        cur.execute("SELECT COUNT(*) FROM words")
        total_words = cur.fetchone()[0]
        print(f"   –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: {total_words}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        cur.execute("SELECT english_word, russian_translation FROM words ORDER BY id")
        all_words = cur.fetchall()
        print(f"   –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:")
        for i, word in enumerate(all_words, 1):
            print(f"     {i}. {word[0]} -> {word[1]}")

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: {added_count}")
        print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped_count}")
        print(f"   üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: {total_words}")

        if added_count > 0:
            print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –°–ª–æ–≤–∞ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ.")

    except psycopg2.OperationalError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("   1. PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("   3. –•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if cur:
            cur.close()
        if conn:
            conn.close()
        print("\nüîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


if __name__ == "__main__":
    setup_database()